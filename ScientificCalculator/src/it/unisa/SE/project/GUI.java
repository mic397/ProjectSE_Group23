/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package it.unisa.SE.project;

import ProjectException.*;
import javax.swing.JOptionPane;
import Command.*;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;

/**
 *
 * @author Michela
 */
public class GUI extends javax.swing.JFrame {

    private Model model;
    private Calculator calculator;
    private final static int maxValues = 12;
    private CommandInvoker inv;
    private DefaultTableModel tableModel;
    private String mess = "command not found";
    private JFileChooser fileChooser;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setToolTipsForKeyCommand();
        this.textArea.setEditable(false);
        model = new Model();
        calculator = Calculator.getCalculator();
        inv = new CommandInvoker(calculator);
        tableModel = (DefaultTableModel) table.getModel();
        setJMenuBar(this.createMenuBar());
        fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileCalculatorFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);
        this.updateOperation.setEnabled(false);
    }

    /**
     * this method generates toolTipCommands, to inform the user that he can use
     * various functions via the keyboard
     */
    public final void setToolTipsForKeyCommand() {
        clearButton.setToolTipText("Delete all elements from the stack (Alt+Q)");
        clearButton.setMnemonic(KeyEvent.VK_Q);
        dropButton.setToolTipText("Remove the last inserted element from the stack (Alt+D)");
        dropButton.setMnemonic(KeyEvent.VK_D);
        dupButton.setToolTipText("Duplicate the last inserted element updating the stack (Alt+U)");
        dupButton.setMnemonic(KeyEvent.VK_U);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        inputField = new javax.swing.JTextField();
        insertButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        swap = new javax.swing.JButton();
        over = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButtonMin = new javax.swing.JButton();
        jButtonAddVar = new javax.swing.JButton();
        sqrt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dropButton = new javax.swing.JButton();
        dupButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        invertButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        minVarButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        computeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        executeOperation = new javax.swing.JButton();
        updateOperation = new javax.swing.JButton();

        jButton5.setText("jButton5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                textAreaAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(textArea);

        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputActionPerformed(evt);
            }
        });
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputFieldKeyPressed(evt);
            }
        });

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        jButton1.setText("+");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumActionPerformed(evt);
            }
        });

        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subActionPerformed(evt);
            }
        });

        jButton3.setText("*");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mulActionPerformed(evt);
            }
        });

        jButton4.setText(":");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divActionPerformed(evt);
            }
        });

        clearButton.setText("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        swap.setText("SWAP");
        swap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                swapActionPerformed(evt);
            }
        });

        over.setText("OVER");
        over.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joverActionPerformed(evt);
            }
        });

        jButton6.setText(">");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveIntoVariableActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButtonMin.setText("<");
        jButtonMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveIntoStackActionPerformed(evt);
            }
        });

        jButtonAddVar.setText("+ var");
        jButtonAddVar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddVarActionPerformed(evt);
            }
        });

        sqrt.setText("âˆš");
        sqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("PROGRAMMABLE SCIENTIFIC CALCULATOR");

        dropButton.setText("DROP");
        dropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropButtonActionPerformed(evt);
            }
        });

        dupButton.setText("DUP");
        dupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dupButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("STACK OPERATIONS");

        invertButton.setText("+-");
        invertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("VARIABLES");

        minVarButton.setText("- var");
        minVarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minVarButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("User-defined operations");

        computeButton.setText("Insert Operation");
        computeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Operation");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Operation Name");

        jLabel6.setText("Operations");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Operations"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(table);

        executeOperation.setText("Execute");
        executeOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeOperationActionPerformed(evt);
            }
        });

        updateOperation.setText("Update operation");
        updateOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOperationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(invertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(sqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(169, 169, 169)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(executeOperation))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(updateOperation)
                                                .addGap(18, 18, 18)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(computeButton)
                                            .addComponent(deleteButton)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(390, 390, 390)
                                .addComponent(jLabel4)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dropButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(77, 77, 77)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(swap, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonMin, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonAddVar)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(over, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(minVarButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jLabel3)))))
                        .addContainerGap(135, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(643, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(dropButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(swap, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(over, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonMin)
                                    .addComponent(jButtonAddVar)
                                    .addComponent(minVarButton)
                                    .addComponent(jButton6)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invertButton)
                            .addComponent(sqrt)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(computeButton)
                                    .addComponent(updateOperation))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(deleteButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(executeOperation))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputActionPerformed

    }//GEN-LAST:event_InputActionPerformed

    /**
     * to insert value on text area
     * @param evt 
     */
    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        String text = inputField.getText();
        try {
            calculator.processInput(text);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "The inserted element is neither a number nor an operation!");
        } catch (ArgumentNotDefinedException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (ArithmeticException ex) {
            JOptionPane.showMessageDialog(rootPane, "Arithmetic Error: " + ex.getMessage());
        } catch (stackIsEmptyException ex1) {
            JOptionPane.showMessageDialog(rootPane, "stack is empty: " + ex1.getMessage());
        } catch (notAcceptableValueException ex2) {
            JOptionPane.showMessageDialog(rootPane, "value not acceptable: " + ex2.getMessage());
        } finally {
            printOnTextArea();
        }
    }//GEN-LAST:event_insertButtonActionPerformed

    /**
     * it sets the updated values â€‹â€‹in the text area
     */
    private void printOnTextArea() {
        inputField.setText(""); //clean the inputTextField
        textArea.setText(model.lastTwelveElements());
    }


    private void textAreaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_textAreaAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_textAreaAncestorAdded

    /**
     * execute the sum updating the GUI
     * @param evt 
     */
    private void sumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumActionPerformed
        try {
            inv.sum.execute();
        } catch (stackIsEmptyException | UnderTwoElementsException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_sumActionPerformed

    /**
     * execute the subtraction updating the GUI
     * @param evt 
     */
    private void subActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subActionPerformed
        try {
            inv.sub.execute();
        } catch (stackIsEmptyException | UnderTwoElementsException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_subActionPerformed

    /**
     * execute the multiplication updating the GUI
     * @param evt 
     */
    private void mulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mulActionPerformed
        try {
            inv.mul.execute();
        } catch (stackIsEmptyException | UnderTwoElementsException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_mulActionPerformed

    /**
     * execute the division operation updating the GUI
     * @param evt 
     */
    private void divActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divActionPerformed
        try {
            inv.div.execute();
        } catch (stackIsEmptyException | UnderTwoElementsException | ArithmeticException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_divActionPerformed

    /**
     * execute a "clear" operation
     * @param evt 
     */
    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        try {
            inv.clear.execute();
        } catch (stackIsEmptyException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.textArea.setText("");
    }//GEN-LAST:event_ClearActionPerformed

    /**
     * execute a "swap" operation
     * @param evt 
     */
    private void swapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_swapActionPerformed
        String message = "There aren't two elements in the stack";
        try {
            inv.swap.execute();
        } catch (UnderTwoElementsException | stackIsEmptyException ex) {
            JOptionPane.showMessageDialog(rootPane, message);
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_swapActionPerformed
    /**
     * This method is called when the user insert a number in the text field and
     * press the "enter" key inside the inputtField This is the same of the
     * click on the insert button
     *
     * @param evt
     */
    private void inputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldKeyPressed

        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            insertButton.doClick();
        }
    }//GEN-LAST:event_inputFieldKeyPressed

    /**
     * execute a "over" operation
     * @param evt 
     */
    private void joverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joverActionPerformed

        String mess = "There aren't two elemento for pushes a copy of the second last element on the stack!";

        try {
            inv.over.execute();
        } catch (UnderTwoElementsException ex) {
            JOptionPane.showMessageDialog(rootPane, mess);
        } catch (stackIsEmptyException ex1) {
            JOptionPane.showMessageDialog(rootPane, ex1.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_joverActionPerformed

    /**
     * execute the saving into variable
     * @param evt 
     */
    private void saveIntoVariableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveIntoVariableActionPerformed
        String var = (String) jComboBox2.getSelectedItem();
        try {
            String messageSuccess = "The value of variable " + var + " is: " + Model.getFirstComplexNumber();
            char va1 = var.charAt(0);
            calculator.saveIntoVariable(va1);
            JOptionPane.showMessageDialog(this, messageSuccess,
                    "Success Operation: ",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (stackIsEmptyException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        printOnTextArea();
    }//GEN-LAST:event_saveIntoVariableActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        String var = (String) jComboBox2.getSelectedItem();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * execute the square root operation
     * @param evt 
     */
    private void sqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtActionPerformed

        String mess = "There isn't an element on the stack!";
        try {
            inv.sqrt.execute();
        } catch (ArgumentNotDefinedException | stackIsEmptyException ex) {
            JOptionPane.showMessageDialog(rootPane, mess);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_sqrtActionPerformed

    /**
     * execute the saving into stack
     * @param evt 
     */
    private void saveIntoStackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveIntoStackActionPerformed

        String value = (String) jComboBox2.getSelectedItem();
        char va1 = value.charAt(0);

        try {
            calculator.saveIntoStack(va1);
        } catch (VariableValueException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
        this.printOnTextArea();
    }//GEN-LAST:event_saveIntoStackActionPerformed

    /**
     * execute the adding into variable selected of the first value on the stack
     * @param evt 
     */
    private void jButtonAddVarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddVarActionPerformed
        String var = (String) jComboBox2.getSelectedItem();
        try {
            String messSucc = "The value of variable " + var + " is modified: "
                    + var + " = " + var + " + " + "(" + Model.getFirstComplexNumber() + ")";
            char va1 = var.charAt(0);
            calculator.addToVariable(va1);
            JOptionPane.showMessageDialog(this, messSucc,
                    "Success Operation: ",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (stackIsEmptyException | VariableValueException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();

    }//GEN-LAST:event_jButtonAddVarActionPerformed

    /**
     * execute the "drop" operation
     * @param evt 
     */
    private void dropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropButtonActionPerformed
        try {
            inv.drop.execute();
        } catch (stackIsEmptyException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_dropButtonActionPerformed

    /**
     * execute the "dup" operation
     * @param evt 
     */
    private void dupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dupButtonActionPerformed
        try {
            inv.dup.execute();
        } catch (stackIsEmptyException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_dupButtonActionPerformed

    /**
     * execute the "invertSign" operation
     * @param evt 
     */
    private void invertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertButtonActionPerformed
        try {
            inv.invert.execute();
        } catch (stackIsEmptyException | UnderOneElementException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        } catch (Exception ex1) {
            JOptionPane.showMessageDialog(this, mess,
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_invertButtonActionPerformed

    /**
     * execute the subtracting into variable selected of the first value on the stack
     * @param evt 
     */
    private void minVarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minVarButtonActionPerformed
        String var = (String) jComboBox2.getSelectedItem();
        try {
            String messageSuccess = "The value of variable " + var + " is modified: "
                    + var + " = " + var + " - " + "(" + Model.getFirstComplexNumber() + ")";
            char va1 = var.charAt(0);
            calculator.minToVariable(va1);
            JOptionPane.showMessageDialog(this, messageSuccess,
                    "Success Operation: ",
                    JOptionPane.INFORMATION_MESSAGE
            );
        } catch (stackIsEmptyException | VariableValueException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        this.printOnTextArea();
    }//GEN-LAST:event_minVarButtonActionPerformed

    /**
     * execute the "insert user-defined" operation
     * @param evt 
     */
    private void computeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeButtonActionPerformed
        try {
            this.updateOperation.setEnabled(false);
            String text = jTextField1.getText();
            String name = jTextField2.getText();
            String messageSuccess = "the operation is stored correctly";
            inv.addCommand(name, text);
            tableModel.insertRow(0, new Object[]{name, text});
            JOptionPane.showMessageDialog(this, messageSuccess,
                    "Success Operation: ",
                    JOptionPane.INFORMATION_MESSAGE);
            jTextField1.setText("");
            jTextField2.setText("");
        } catch (TextOperationPresent | ElementNotAvailableException | notAcceptableValueException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error Operation: ",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_computeButtonActionPerformed

    /**
     * execute the "delete user-defined" operation
     * @param evt 
     */   
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            this.updateOperation.setEnabled(false);
            int indexSelected = checkIndexTable();
            String nameOperation = tableModel.getValueAt(indexSelected, 0).toString();
            inv.deleteCommand(tableModel.getValueAt(indexSelected, 1).toString());
            tableModel.removeRow(indexSelected);
            JOptionPane.showMessageDialog(rootPane, "The operation " + "'"
                    + nameOperation + "'" + " is deleted correctly.", "Information:", JOptionPane.INFORMATION_MESSAGE);
        } catch (NoSelectedRowException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Attention:", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     *
     * @return the index of row-selected table
     * @throws NoSelectedRowException
     */
    private int checkIndexTable() throws NoSelectedRowException {
        int indexTable = table.getSelectedRow();
        if (indexTable == -1) {
            throw new NoSelectedRowException("Select a row-command in table to execute it!");
        }
        return indexTable;
    }

    /**
     * execute the command selected, updating the text area.
     *
     * @param evt
     */
    private void executeOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeOperationActionPerformed
        try {
            this.updateOperation.setEnabled(false);
            int indexTable = checkIndexTable();
            inv.executeCommand(tableModel.getValueAt(indexTable, 0).toString());
        } catch (NoSelectedRowException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Attention:", JOptionPane.WARNING_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error:", JOptionPane.ERROR_MESSAGE);
        }
        this.printOnTextArea();
    }//GEN-LAST:event_executeOperationActionPerformed

    /**
     * modify a user-operation command selected
     *
     * @param evt
     */
    private void updateOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOperationActionPerformed
        try {
            String nameOp = this.jTextField2.getText();
            String commandOp = this.jTextField1.getText();
            inv.modifyCommand(nameOp, commandOp);
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String nameRow = tableModel.getValueAt(i, 0).toString();

                if (nameRow.equals(nameOp)) {
                    tableModel.setValueAt(commandOp, i, 1);
                    break;
                }
            }
            JOptionPane.showMessageDialog(rootPane, "Operation modify completed .", "Information:", JOptionPane.INFORMATION_MESSAGE);
        } catch (NoSelectedRowException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Attention:", JOptionPane.WARNING_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateOperationActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * enable the "modify user-defined" operation when user selects a row by operation table
     * @param evt 
     */
    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        try {
            this.updateOperation.setEnabled(true);
            int indexTable = checkIndexTable();
            String nameOp = tableModel.getValueAt(indexTable, 0).toString();
            String commandOp = tableModel.getValueAt(indexTable, 1).toString();
            this.jTextField2.setText(nameOp);
            this.jTextField1.setText(commandOp);
        } catch (NoSelectedRowException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Attention:", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_tableMouseClicked
    /**
     * It checks the accuracy of the extension provided by the user
     */
    private void checkNameFile(String nameFile) throws ExtensionFileException {
        int indexExtension = nameFile.indexOf(".");
        if (!nameFile.substring(indexExtension).equals(".txt")) {
            throw new ExtensionFileException("This extension is not usable!\nUse (*.txt)");
        }
    }

    /**
     * import the User-defined operation model by a suitable file .
     *
     * @throws FileExistException
     * @throws IOException
     * @throws UnsuitableFileException
     * @throws Exception
     */
    private void importFile() throws FileExistException, IOException, UnsuitableFileException, TextOperationPresent, ElementNotAvailableException, notAcceptableValueException {
        int choose = fileChooser.showOpenDialog(rootPane);
        if (choose == JFileChooser.OPEN_DIALOG) {
            String nameFile = fileChooser.getSelectedFile().getName();
            String nameFileExtended = fileChooser.getSelectedFile().toString();
            StringBuilder builder = new StringBuilder();
            HashMap<String, String> hashCommands = new ImportFile(nameFileExtended, nameFile).execute(inv);
            hashCommands.entrySet().forEach(e -> {
                tableModel.insertRow(0, new Object[]{e.getKey(), e.getValue()});
            });
        }
    }

    /**
     *
     * @return a JMenuBar from which the user can import or export files
     * directly from their file/directory system
     */
    private JMenuBar createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menuFile = new JMenu("File");
        menuFile.setToolTipText("File Menu: Alt + F");
        menuFile.setMnemonic(KeyEvent.VK_F);

        //set font size to 18
        menuFile.setFont(new Font(menuFile.getFont().toString(), Font.PLAIN, 18));

        //add icons to import, export operations.
        JMenuItem menuItemImport = new JMenuItem("Import...", new ImageIcon("./src/import16.png"));
        JMenuItem menuItemExport = new JMenuItem("Export...", new ImageIcon("./src/export16.png"));
        JMenuItem menuItemExit = new JMenuItem("Exit (X)");

        //event menuItemImport
        menuItemImport.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    importFile();
                } catch (FileExistException | UnsuitableFileException | TextOperationPresent | ElementNotAvailableException | notAcceptableValueException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Attention:", JOptionPane.WARNING_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(rootPane, ex.getMessage(),
                            "Error: ",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        //event menuItemExport
        menuItemExport.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveFile();
            }
        });
        //event menuExit to close calculator app
        menuItemExit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int choose = JOptionPane.showConfirmDialog(rootPane, "Do you want closing app ?", "Exit: ", JOptionPane.OK_CANCEL_OPTION);
                if (choose == JOptionPane.OK_OPTION) {
                    System.exit(0);
                }
            }
        });

        menuFile.add(menuItemImport);
        menuFile.add(menuItemExport);
        menuFile.addSeparator();
        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        return menuBar;
    }

    /**
     * Verify the existence of file
     *
     * @throws FileExistException
     */
    private void checkFile() throws FileExistException {
        if (fileChooser.getSelectedFile().exists()) {
            throw new FileExistException("This file name is already used !");
        }
    }

    /**
     * Verify if there are elements by saving on a file
     *
     * @throws TableIsEmptyException
     */
    private void checkTableModel() throws TableIsEmptyException {
        if (tableModel.getRowCount() == 0) {
            throw new TableIsEmptyException("There aren't elements in user-defined table !");
        }
    }

    /**
     * save the User-defined operation model in a file choosen by user.
     */
    private void saveFile() {
        int choose = fileChooser.showSaveDialog(rootPane);
        if (choose == JFileChooser.APPROVE_OPTION) {
            try {
                String nameFile = fileChooser.getSelectedFile().getName();
                String nameFileExtended = fileChooser.getSelectedFile().toString();
                checkNameFile(nameFile);
                checkFile();
                checkTableModel();
                StringBuilder builder = new StringBuilder();
                builder.append("Name Operation:").append("\t\t").append("Operation commands:\n");
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    Object nameRow = tableModel.getValueAt(i, 0);
                    Object nameCol = tableModel.getValueAt(i, 1);
                    if (nameRow != null && nameCol != null) {
                        builder.append(nameRow.toString()).append("\t\t\t").append(nameCol.toString()).append("\n");
                    } else {
                        break;
                    }
                    new SaverFile(nameFileExtended, builder.toString()).execute();
                    JOptionPane.showMessageDialog(rootPane, "Save File completed !", "Information:", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (FileExistException | TableIsEmptyException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Attention:", JOptionPane.WARNING_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "File operation not completed !",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } catch (ExtensionFileException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton computeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton dropButton;
    private javax.swing.JButton dupButton;
    private javax.swing.JButton executeOperation;
    private javax.swing.JTextField inputField;
    private javax.swing.JButton insertButton;
    private javax.swing.JButton invertButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButtonAddVar;
    private javax.swing.JButton jButtonMin;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton minVarButton;
    private javax.swing.JButton over;
    private javax.swing.JButton sqrt;
    private javax.swing.JButton swap;
    private javax.swing.JTable table;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton updateOperation;
    // End of variables declaration//GEN-END:variables
}
